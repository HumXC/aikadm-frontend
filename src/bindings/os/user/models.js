// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

/**
 * User represents a user account.
 */
export class User {
    /**
     * Creates a new User instance.
     * @param {Partial<User>} [$$source = {}] - The source object to create the User.
     */
    constructor($$source = {}) {
        if (!("Uid" in $$source)) {
            /**
             * Uid is the user ID.
             * On POSIX systems, this is a decimal number representing the uid.
             * On Windows, this is a security identifier (SID) in a string format.
             * On Plan 9, this is the contents of /dev/user.
             * @member
             * @type {string}
             */
            this["Uid"] = "";
        }
        if (!("Gid" in $$source)) {
            /**
             * Gid is the primary group ID.
             * On POSIX systems, this is a decimal number representing the gid.
             * On Windows, this is a SID in a string format.
             * On Plan 9, this is the contents of /dev/user.
             * @member
             * @type {string}
             */
            this["Gid"] = "";
        }
        if (!("Username" in $$source)) {
            /**
             * Username is the login name.
             * @member
             * @type {string}
             */
            this["Username"] = "";
        }
        if (!("Name" in $$source)) {
            /**
             * Name is the user's real or display name.
             * It might be blank.
             * On POSIX systems, this is the first (or only) entry in the GECOS field
             * list.
             * On Windows, this is the user's display name.
             * On Plan 9, this is the contents of /dev/user.
             * @member
             * @type {string}
             */
            this["Name"] = "";
        }
        if (!("HomeDir" in $$source)) {
            /**
             * HomeDir is the path to the user's home directory (if they have one).
             * @member
             * @type {string}
             */
            this["HomeDir"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new User instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {User}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new User(/** @type {Partial<User>} */($$parsedSource));
    }
}
