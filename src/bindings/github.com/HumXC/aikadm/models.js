// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as desktop$0 from "../../rkoesters/xdg/desktop/models.js";

export class SessionEntry {
    /**
     * Creates a new SessionEntry instance.
     * @param {Partial<SessionEntry>} [$$source = {}] - The source object to create the SessionEntry.
     */
    constructor($$source = {}) {
        if (!("Version" in $$source)) {
            /**
             * The version of spec that the file conforms to.
             * @member
             * @type {string}
             */
            this["Version"] = "";
        }
        if (!("Name" in $$source)) {
            /**
             * The real name of the desktop entry.
             * @member
             * @type {string}
             */
            this["Name"] = "";
        }
        if (!("GenericName" in $$source)) {
            /**
             * A generic name, for example: Text Editor or Web Browser.
             * @member
             * @type {string}
             */
            this["GenericName"] = "";
        }
        if (!("Comment" in $$source)) {
            /**
             * A short comment that describes the desktop entry.
             * @member
             * @type {string}
             */
            this["Comment"] = "";
        }
        if (!("Icon" in $$source)) {
            /**
             * The name of an icon that should be used for this desktop
             * entry.  If it is not an absolute path, it should be searched
             * for using the Icon Theme Specification.
             * @member
             * @type {string}
             */
            this["Icon"] = "";
        }
        if (!("URL" in $$source)) {
            /**
             * The URL for a Link type entry.
             * @member
             * @type {string}
             */
            this["URL"] = "";
        }
        if (!("NoDisplay" in $$source)) {
            /**
             * Whether or not to display the file in menus.
             * @member
             * @type {boolean}
             */
            this["NoDisplay"] = false;
        }
        if (!("Hidden" in $$source)) {
            /**
             * Whether the use has deleted the desktop entry.
             * @member
             * @type {boolean}
             */
            this["Hidden"] = false;
        }
        if (!("OnlyShowIn" in $$source)) {
            /**
             * A list of desktop environments that the desktop entry should
             * only be shown in.
             * @member
             * @type {string[]}
             */
            this["OnlyShowIn"] = [];
        }
        if (!("NotShowIn" in $$source)) {
            /**
             * A list of desktop environments that the desktop entry should
             * not be shown in.
             * @member
             * @type {string[]}
             */
            this["NotShowIn"] = [];
        }
        if (!("DBusActivatable" in $$source)) {
            /**
             * Whether DBus Activation is supported by this application.
             * @member
             * @type {boolean}
             */
            this["DBusActivatable"] = false;
        }
        if (!("TryExec" in $$source)) {
            /**
             * The path to an executable to test if the program is
             * installed.
             * @member
             * @type {string}
             */
            this["TryExec"] = "";
        }
        if (!("Exec" in $$source)) {
            /**
             * Program to execute.
             * @member
             * @type {string}
             */
            this["Exec"] = "";
        }
        if (!("Path" in $$source)) {
            /**
             * The path that should be the programs working directory.
             * @member
             * @type {string}
             */
            this["Path"] = "";
        }
        if (!("Terminal" in $$source)) {
            /**
             * Whether the program should be run in a terminal window.
             * @member
             * @type {boolean}
             */
            this["Terminal"] = false;
        }
        if (!("Actions" in $$source)) {
            /**
             * A slice of actions.
             * @member
             * @type {(desktop$0.Action | null)[]}
             */
            this["Actions"] = [];
        }
        if (!("MimeType" in $$source)) {
            /**
             * A slice of mimetypes supported by this program.
             * @member
             * @type {string[]}
             */
            this["MimeType"] = [];
        }
        if (!("Categories" in $$source)) {
            /**
             * A slice of categories that the desktop entry should be shown
             * in in a menu.
             * @member
             * @type {string[]}
             */
            this["Categories"] = [];
        }
        if (!("Implements" in $$source)) {
            /**
             * A slice of interfaces that this application implements.
             * @member
             * @type {string[]}
             */
            this["Implements"] = [];
        }
        if (!("Keywords" in $$source)) {
            /**
             * A slice of keywords.
             * @member
             * @type {string[]}
             */
            this["Keywords"] = [];
        }
        if (!("StartupNotify" in $$source)) {
            /**
             * Whether the program will send a "remove" message when started
             * with the DESKTOP_STARTUP_ID env variable is set.
             * @member
             * @type {boolean}
             */
            this["StartupNotify"] = false;
        }
        if (!("StartupWMClass" in $$source)) {
            /**
             * The string that the program will set as WM Class or WM name
             * hint.
             * @member
             * @type {string}
             */
            this["StartupWMClass"] = "";
        }
        if (!("X" in $$source)) {
            /**
             * Extended pairs. These are all of the key=value pairs in which
             * the key follows the format X-PRODUCT-KEY. For example,
             * accessing X-Unity-IconBackgroundColor can be done with:
             * 
             * 	entry.X["Unity"]["IconBackgroundColor"]
             * @member
             * @type {{ [_: string]: { [_: string]: string } }}
             */
            this["X"] = {};
        }
        if (!("Type" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Type"] = "";
        }
        if (!("SessionType" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["SessionType"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new SessionEntry instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {SessionEntry}
     */
    static createFrom($$source = {}) {
        const $$createField8_0 = $$createType0;
        const $$createField9_0 = $$createType0;
        const $$createField15_0 = $$createType3;
        const $$createField16_0 = $$createType0;
        const $$createField17_0 = $$createType0;
        const $$createField18_0 = $$createType0;
        const $$createField19_0 = $$createType0;
        const $$createField22_0 = $$createType5;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("OnlyShowIn" in $$parsedSource) {
            $$parsedSource["OnlyShowIn"] = $$createField8_0($$parsedSource["OnlyShowIn"]);
        }
        if ("NotShowIn" in $$parsedSource) {
            $$parsedSource["NotShowIn"] = $$createField9_0($$parsedSource["NotShowIn"]);
        }
        if ("Actions" in $$parsedSource) {
            $$parsedSource["Actions"] = $$createField15_0($$parsedSource["Actions"]);
        }
        if ("MimeType" in $$parsedSource) {
            $$parsedSource["MimeType"] = $$createField16_0($$parsedSource["MimeType"]);
        }
        if ("Categories" in $$parsedSource) {
            $$parsedSource["Categories"] = $$createField17_0($$parsedSource["Categories"]);
        }
        if ("Implements" in $$parsedSource) {
            $$parsedSource["Implements"] = $$createField18_0($$parsedSource["Implements"]);
        }
        if ("Keywords" in $$parsedSource) {
            $$parsedSource["Keywords"] = $$createField19_0($$parsedSource["Keywords"]);
        }
        if ("X" in $$parsedSource) {
            $$parsedSource["X"] = $$createField22_0($$parsedSource["X"]);
        }
        return new SessionEntry(/** @type {Partial<SessionEntry>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);
const $$createType1 = desktop$0.Action.createFrom;
const $$createType2 = $Create.Nullable($$createType1);
const $$createType3 = $Create.Array($$createType2);
const $$createType4 = $Create.Map($Create.Any, $Create.Any);
const $$createType5 = $Create.Map($Create.Any, $$createType4);
